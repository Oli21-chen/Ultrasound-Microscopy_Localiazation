import os
import re
import matplotlib.pyplot as plt
import numpy as np
import re
from skimage.color import rgb2gray
# =============================================================================
# cutting image
# Imperial College London
# Dong Chen
# 2021/6/13
# =============================================================================

class get_cutting_image:
    def _init_(self, dataPath='C:/Users/DELL/Desktop/FinalProject/deeplearning_mSPCN-ULM/scripts'):
        self.dataPath=dataPath
        
    
    def getitem(self, index):
        
        I=[]
        for root, dirnames, filenames in os.walk(self.dataPath):
            for filename in filenames:
                if re.search("\.(jpg|jpeg|JPEG|png|bmp|tiff)$", filename):
                    filepath = os.path.join(root, filename)
                    image = plt.imread(filepath)
                    grayscale = rgb2gray(image)
                    image=image/255
                    I.append(image)
        x_train=np.array(x_train)
                
        return I
###############################################################################################    
I=np.random.rand(12,14)
fact=5
sz=np.shape(I)
rem=[sz_element % fact for sz_element in sz]

times=[]
for (item1, item2) in zip (sz,rem):
    times.append((item1-item2)/fact)
#####  row
if times[0]==0:
    if rem[0]!=0:
        I=np.append(I,np.zeros((fact-sz[0],sz[1])),axis=0)
        sz=list(np.shape(I))
else:
    if rem[0]!=0:
        I=np.append(I,np.zeros((fact-(sz[0]-int(times[0])*fact),sz[1])),axis=0)
        sz=list(np.shape(I))
######    coloum
if times[1]==0:
    if rem[1]!=0:
        I=np.append(I , np.zeros((sz[0],fact-sz[1])),axis=1)
        sz=list(np.shape(I))
else:
    if rem[1]!=0:
        I=np.append(I,np.zeros((sz[0],fact-(sz[1]-int(times[1])*fact))),axis=1)
        sz=list(np.shape(I))
####   patches####
rem=[sz_element % fact for sz_element in sz]
times=[]
for (item1, item2) in zip (sz,rem):
    times.append((item1-item2)/fact)
num=np.prod(times)#production of elements in array
patch=np.zeros((fact,fact,int(num)))
row=0
col=0


for i in range(int(num)):
    patch[:,:,i]=I[row:row+fact,col:col+fact]
    if row+fact>=sz[0]:
        col=col+fact
        row=0
    else:
        row=row+fact
